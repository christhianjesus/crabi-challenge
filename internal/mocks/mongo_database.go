// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	mongo "go.mongodb.org/mongo-driver/v2/mongo"

	options "go.mongodb.org/mongo-driver/v2/mongo/options"
)

// mongoDatabase is an autogenerated mock type for the mongoDatabase type
type MongoDatabase struct {
	mock.Mock
}

// Collection provides a mock function with given fields: name, opts
func (_m *MongoDatabase) Collection(name string, opts ...options.Lister[options.CollectionOptions]) *mongo.Collection {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Collection")
	}

	var r0 *mongo.Collection
	if rf, ok := ret.Get(0).(func(string, ...options.Lister[options.CollectionOptions]) *mongo.Collection); ok {
		r0 = rf(name, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.Collection)
		}
	}

	return r0
}

// newMongoDatabase creates a new instance of mongoDatabase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMongoDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MongoDatabase {
	mock := &MongoDatabase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
